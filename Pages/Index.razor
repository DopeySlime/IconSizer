@page "/"
@inject IJSRuntime JS
@using System.IO
@* @using ICSharpCode.SharpZipLib.Zip *@
@using SixLabors.ImageSharp
@* @using SixLabors.ImageSharp.Formats *@
@* @using SixLabors.ImageSharp.Processing *@
@using System.Diagnostics
@using Size = IconSize.Data.Size


<PageTitle>IconCreator</PageTitle>

<h3 class="flex justify-center pb-4">Blazor Server File Upload</h3>

<div data-theme="pastel" class="flex h-screen">
    <div class="flex justify-center px-[25%] grid grid-cols-2 gap-2 ">
        <div>
            <IconSize.Components.DragDrop InputEvent="OnInputFileChange"/>
            <IconSize.Components.FileViewer @ref="_fileView"/>
            <div class="grid grid-cols-6 gap-4 auto-cols-max">
                <div class="col-start-1 col-end-3">
                    <button class="btn btn-primary w-full" @onclick="Clear">Clear all</button>
                </div>
                <div class="col-end-7 col-span-2">
                    <button class="btn btn-primary w-full" @onclick="OnDownload">Download</button>
                </div>
            </div>
        </div>
        <div>
            <IconSize.Components.IconSelecter @ref="_platformView"/>
        </div>
    </div>
</div>


@code{
    string _message = "No uploaded files";
        private const long MaxAllowedSize = 10000000;
    IconSize.Components.FileViewer? _fileView;
    IconSize.Components.IconSelecter? _platformView;
    private void OnInputFileChange(InputFileChangeEventArgs e)
    {
        _fileView?.AddUploadFile(e.GetMultipleFiles());
        _message = $"Files uploaded";
        this.StateHasChanged();
    }

    private async Task OnDownload()
    {   
        IBrowserFile? selectedFile = _fileView?.GetSelected();

        if (selectedFile != null)
        {
            List<bool>? selectedPlatform = _platformView?.GetPlatforms();
            
            string outputName = "AppIcons.zip";
            
            List<Size> outputSizes = OutputSettings.SelectedSizes(selectedPlatform);
            //
            // foreach (var s in outputSizes)
            // {
            //     Console.WriteLine(s);
            // }
            
            Console.WriteLine(outputSizes.Count);

            ImageResizer imageResizer = new ImageResizer(outputSizes);

            
            Debug.WriteLine("Download not working!");
            // Image image = await Image.LoadAsync(selectedFile.OpenReadStream(MaxAllowedSize));
            // var outputStream = new MemoryStream();

            var outputStream = await imageResizer.ResizeImage(selectedFile);

            using var outputStreamRef = new DotNetStreamReference(stream: outputStream);

            await JS.InvokeVoidAsync("downloadFileFromStream", outputName, outputStreamRef);
        }
    }
    private Task Clear()
    {
        _fileView?.Clear();
        return Task.CompletedTask;
    }
}
